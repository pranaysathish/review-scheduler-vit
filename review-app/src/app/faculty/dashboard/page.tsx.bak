"use client";

import { useEffect, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { motion, AnimatePresence } from 'framer-motion';
import { Plus, Calendar, Users, FileText, Settings, Clock, Upload, Grid, BookOpen, AlertCircle, CheckCircle } from 'lucide-react';
import LogoutButton from '@/components/auth/logout-button';
import { parseTimetableSlots, getAllFreeSlots, FreeSlot, Schedule, splitAllSlotsByDuration } from '@/utils/timetable-parser';
import CreateClassroomForm from '@/components/faculty/create-classroom-form';
import ClassroomDetailsModal from '@/components/faculty/classroom-details-modal';
import ActivityFeed from '@/components/shared/activity-feed';

export default function FacultyDashboard() {
  const [user, setUser] = useState<any>(null);
  const [classrooms, setClassrooms] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [reviewSlots, setReviewSlots] = useState<any[]>([]);
  const [submissions, setSubmissions] = useState<any[]>([]);
  const [slotsLoading, setSlotsLoading] = useState(false);
  const [submissionsLoading, setSubmissionsLoading] = useState(false);
  const supabase = createClientComponentClient();

  // Classroom state
  const [showCreateClassroomForm, setShowCreateClassroomForm] = useState(false);
  const [selectedClassroom, setSelectedClassroom] = useState<any>(null);
  const [showClassroomDetailsModal, setShowClassroomDetailsModal] = useState(false);

  // Timetable state
  const [timetableText, setTimetableText] = useState('');
  const [parsedSchedule, setParsedSchedule] = useState<Schedule | null>(null);
  const [allFreeSlots, setAllFreeSlots] = useState<FreeSlot[]>([]);
  const [splitFreeSlots, setSplitFreeSlots] = useState<FreeSlot[]>([]);
  const [selectedSlots, setSelectedSlots] = useState<FreeSlot[]>([]);
  const [parseError, setParseError] = useState<string | null>(null);
  const [parseSuccess, setParseSuccess] = useState(false);
  const [highlightedSlot, setHighlightedSlot] = useState<string | null>(null);

  // Review slot form state
  const [reviewDuration, setReviewDuration] = useState('10');
  const [reviewStage, setReviewStage] = useState('Review 1');
  const [selectedClassroomId, setSelectedClassroomId] = useState('');
  const [bookingDeadline, setBookingDeadline] = useState('');
  const [publishSuccess, setPublishSuccess] = useState(false);
  const [publishError, setPublishError] = useState(false);
  const [publishMessage, setPublishMessage] = useState('');

  // Function to check if a slot is selected
  const isSlotSelected = (day: string, time: string, endTime: string) => {
    return selectedSlots.some(
      slot => slot.day === day && slot.start === time && slot.end === endTime
    );
  };

  // Function to toggle slot selection
  const toggleSlotSelection = (day: string, time: string, endTime: string, isFree: boolean) => {
    if (!isFree) return; // Can't select busy slots
    
    const slotKey = `${day}-${time}-${endTime}`;
    
    if (isSlotSelected(day, time, endTime)) {
      // Remove from selected
      setSelectedSlots(selectedSlots.filter(
        slot => !(slot.day === day && slot.start === time && slot.end === endTime)
      ));
    } else {
      // Add to selected
      setSelectedSlots([...selectedSlots, {
        day,
        start: time,
        end: endTime,
        code: null
      }]);
    }
  };

  // Effect to update split slots when duration changes
  useEffect(() => {
    if (allFreeSlots.length > 0) {
      const duration = parseInt(reviewDuration, 10);
      const splitSlots = splitAllSlotsByDuration(allFreeSlots, duration);
      setSplitFreeSlots(splitSlots);
    }
  }, [allFreeSlots, reviewDuration]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Get faculty classrooms with accurate student counts using the stored procedure
        const { data: classroomData, error: classroomError } = await supabase.rpc(
          'get_classrooms_with_student_counts',
          { p_faculty_id: user.id }
        );

        if (classroomError) {
          console.error('Error fetching classrooms with RPC:', classroomError);
          
          // Fallback to standard query if RPC fails
          const { data: fallbackData, error: fallbackError } = await supabase
            .from('classrooms')
            .select(`
              *,
              teams:teams(count),
              students:classroom_students(count)
            `)
            .eq('faculty_id', user.id);

          if (fallbackError) {
            throw fallbackError;
          }

          // Process the counts from the join
          const processedClassrooms = fallbackData?.map(classroom => ({
            ...classroom,
            teams_count: classroom.teams?.count || 0,
            students_count: classroom.students?.count || 0
          })) || [];

          setClassrooms(processedClassrooms);
        } else {
          // If RPC was successful, use the data directly
          setClassrooms(classroomData || []);
        }
        
        // After classrooms are loaded, fetch slots and submissions
        fetchReviewSlots();
        fetchSubmissions();
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }  
    };

    const fetchUserData = async () => {
      try {
        setLoading(true);
        
        // Get current user
        const { data: { user: currentUser } } = await supabase.auth.getUser();
        
        if (!currentUser) {
          throw new Error('User not found');
        }

        // Get user details from the database
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('*')
          .eq('supabase_user_id', currentUser.id)
          .single();

        if (userError) {
          throw userError;
        }

        setUser(userData);

        fetchData();
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchUserData();
  }, [supabase]);

  // This function is now defined inside the useEffect above
  
  // Function to fetch review slots
  const fetchReviewSlots = async () => {
    try {
      setSlotsLoading(true);
      const response = await fetch('/api/faculty/slots');
      
      if (!response.ok) {
        throw new Error('Failed to fetch review slots');
      }
      
      const { data } = await response.json();
      setReviewSlots(data || []);
    } catch (error) {
      console.error('Error fetching review slots:', error);
    } finally {
      setSlotsLoading(false);
    }
  };
  
  // Function to fetch submissions
  const fetchSubmissions = async () => {
    try {
      setSubmissionsLoading(true);
      const response = await fetch('/api/faculty/submissions');
      
      if (!response.ok) {
        throw new Error('Failed to fetch submissions');
      }
      
      const { data } = await response.json();
      setSubmissions(data || []);
    } catch (error) {
      console.error('Error fetching submissions:', error);
    } finally {
      setSubmissionsLoading(false);
    }
  };

  // Helper function to convert day number to full day name
  const getDayFullName = (day: number) => {
    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
    return days[day] || 'Unknown';
  };
  
  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.5
      }
    }
  };

  const fadeInVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.6
      }
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <header className="bg-gray-900 border-b border-gray-800">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-xl font-bold">VIT Review</h1>
          <div className="flex items-center gap-4">
            <span className="text-gray-400">{user?.name}</span>
            <LogoutButton variant="minimal" />
          </div>
        </div>
      </header>

      {/* Main content */}
      <main className="container mx-auto px-4 py-8">
        <motion.div
          initial="hidden"
          animate="visible"
          variants={containerVariants}
          className="mb-8"
        >
          {/* Welcome message with fade-in animation */}
          <motion.div
            variants={fadeInVariants}
            className="bg-gradient-to-r from-indigo-900/40 to-purple-900/40 rounded-xl p-8 mb-8 border border-indigo-800/50"
          >
            <h2 className="text-3xl font-bold mb-2">Welcome, {user?.name?.split(' ')[0] || 'Professor'}!</h2>
            <p className="text-gray-300">
              Manage your classrooms, schedule reviews, and track student progress all in one place.
            </p>
          </motion.div>

          {/* Navigation tabs */}
          <motion.div variants={itemVariants} className="flex border-b border-gray-800 mb-6">
            <button
              onClick={() => setActiveTab('overview')}
              className={`px-4 py-2 font-medium ${activeTab === 'overview' ? 'text-white border-b-2 border-white' : 'text-gray-400 hover:text-white'}`}
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('timetable')}
              className={`px-4 py-2 font-medium ${activeTab === 'timetable' ? 'text-white border-b-2 border-white' : 'text-gray-400 hover:text-white'}`}
            >
              Timetable
            </button>
            <button
              onClick={() => setActiveTab('slots')}
              className={`px-4 py-2 font-medium ${activeTab === 'slots' ? 'text-white border-b-2 border-white' : 'text-gray-400 hover:text-white'}`}
            >
              Review Slots
            </button>
            <button
              onClick={() => setActiveTab('submissions')}
              className={`px-4 py-2 font-medium ${activeTab === 'submissions' ? 'text-white border-b-2 border-white' : 'text-gray-400 hover:text-white'}`}
            >
              Submissions
            </button>
          </motion.div>

          {activeTab === 'overview' && (
            <>
              <motion.div variants={itemVariants} className="flex justify-between items-center mb-6">
                <div>
                  <h2 className="text-2xl font-bold">Dashboard Overview</h2>
                  <p className="text-gray-400">Manage your classrooms and review schedules</p>
                </div>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="bg-white text-black px-4 py-2 rounded-lg flex items-center gap-2 font-medium"
                  onClick={() => setShowCreateClassroomForm(true)}
                >
                  <Plus size={18} />
                  Create Classroom
                </motion.button>
              </motion.div>

              {/* Stats overview */}
              <motion.div variants={itemVariants} className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                <div className="bg-gray-900 p-6 rounded-xl border border-gray-800">
                  <div className="flex items-center gap-4">
                    <div className="p-3 bg-indigo-900/30 rounded-lg">
                      <Users className="text-indigo-400" size={24} />
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Classrooms</p>
                      <h3 className="text-2xl font-bold">{classrooms.length}</h3>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-900 p-6 rounded-xl border border-gray-800">
                  <div className="flex items-center gap-4">
                    <div className="p-3 bg-emerald-900/30 rounded-lg">
                      <Calendar className="text-emerald-400" size={24} />
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Review Slots</p>
                      <h3 className="text-2xl font-bold">0</h3>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-900 p-6 rounded-xl border border-gray-800">
                  <div className="flex items-center gap-4">
                    <div className="p-3 bg-amber-900/30 rounded-lg">
                      <FileText className="text-amber-400" size={24} />
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Submissions</p>
                      <h3 className="text-2xl font-bold">0</h3>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-900 p-6 rounded-xl border border-gray-800">
                  <div className="flex items-center gap-4">
                    <div className="p-3 bg-rose-900/30 rounded-lg">
                      <Clock className="text-rose-400" size={24} />
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Department</p>
                      <h3 className="text-sm font-medium truncate max-w-[120px]">{user?.department || 'Not set'}</h3>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Create Classroom Form */}
              <AnimatePresence>
                {showCreateClassroomForm && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    className="mb-8"
                  >
                    <CreateClassroomForm 
                      onSuccess={(classroomId) => {
                        setShowCreateClassroomForm(false);
                        fetchData();
                      }}
                      onCancel={() => setShowCreateClassroomForm(false)}
                    />
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Classrooms */}
              <motion.div variants={itemVariants}>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-bold">Your Classrooms</h3>
                  <button className="text-sm text-indigo-400 hover:text-indigo-300">View all</button>
                </div>

                {classrooms.length === 0 ? (
                  <div className="bg-gray-900 border border-gray-800 rounded-xl p-8 text-center">
                    <div className="mb-4 mx-auto w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center">
                      <Users size={24} className="text-gray-400" />
                    </div>
                    <h4 className="text-lg font-medium mb-2">No classrooms yet</h4>
                    <p className="text-gray-400 mb-6">Create a classroom to start managing your J-component reviews</p>
                    <button 
                      className="bg-indigo-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 font-medium mx-auto hover:bg-indigo-700"
                      onClick={() => setShowCreateClassroomForm(true)}
                    >
                      <Plus size={18} />
                      Create Classroom
                    </button>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {classrooms.map((classroom) => (
                      <div 
                        key={classroom.id} 
                        className="bg-gray-900 border border-gray-800 rounded-xl p-6 hover:bg-gray-800 transition-colors"
                      >
                        <h4 className="font-bold text-lg mb-2">{classroom.name}</h4>
                        <p className="text-gray-400 text-sm mb-4">{classroom.link_code}</p>

                        {/* Review deadlines */}
                        {classroom.review_deadlines && Object.keys(classroom.review_deadlines).length > 0 && (
                          <div className="mb-4">
                            <p className="text-xs text-gray-500 mb-2">Review Deadlines</p>
                            <div className="space-y-1">
                              {Object.entries(classroom.review_deadlines).map(([review, date]) => {
                                const isUpcoming = new Date(date) > new Date();
                                return (
                                  <div key={review} className="flex justify-between items-center">
                                    <span className="text-sm">{review}</span>
                                    <span className={`text-xs px-2 py-1 rounded-full ${
                                      isUpcoming 
                                        ? 'bg-emerald-900/30 text-emerald-400' 
                                        : 'bg-gray-800 text-gray-400'
                                    }`}>
                                      {new Date(date).toLocaleDateString()}
                                    </span>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        )}

                        <div className="flex justify-between items-center">
                          <span className="text-xs bg-gray-800 px-2 py-1 rounded-full">
                            {classroom.students_count || 0} students
                          </span>
                          <span className="text-xs bg-gray-800 px-2 py-1 rounded-full">
                            {classroom.teams_count || 0} teams
                          </span>
                        </div>

                        <button 
                          className="text-sm text-indigo-400 hover:text-indigo-300 mt-4"
                          onClick={() => {
                            setSelectedClassroom(classroom);
                            setShowClassroomDetailsModal(true);
                          }}
                        >
                          View Details
                        </button>
                      </div>
                    ))}

                    <motion.div 
                      whileHover={{ scale: 1.03 }}
                      className="bg-gray-900 border border-dashed border-gray-700 rounded-xl p-6 flex flex-col items-center justify-center text-center cursor-pointer hover:bg-gray-800 transition-colors"
                      onClick={() => setShowCreateClassroomForm(true)}
                    >
                      <div className="w-12 h-12 bg-gray-800 rounded-full flex items-center justify-center mb-4">
                        <Plus size={24} className="text-indigo-400" />
                      </div>
                      <h4 className="font-medium mb-1">Create New Classroom</h4>
                      <p className="text-gray-500 text-sm">Add a new classroom for your J-component</p>
                    </motion.div>
                  </div>
                )}
              </motion.div>

              {/* Recent activity */}
              <motion.div variants={itemVariants} className="mt-8">
                <h3 className="text-xl font-bold mb-4">Recent Activity</h3>
                <ActivityFeed userRole="faculty" />
              </motion.div>
            </>
          )}

          {activeTab === 'timetable' && (
            <motion.div
              initial="hidden"
              animate="visible"
              variants={containerVariants}
            >
              <motion.div variants={itemVariants} className="mb-6 text-center">
                <h2 className="text-2xl font-bold mb-2">Timetable Management</h2>
                <p className="text-gray-400 max-w-2xl mx-auto">Upload and parse your VIT timetable to automatically identify free slots for scheduling reviews</p>
              </motion.div>

              {/* Upload Timetable Section */}
              <motion.div
                variants={itemVariants}
                className="max-w-2xl mx-auto mb-8"
              >
                <div className="bg-gradient-to-r from-indigo-900/30 to-purple-900/20 rounded-xl p-6 shadow-xl border border-indigo-800/30">
                  <div className="flex items-center gap-4 mb-5">
                    <div className="bg-indigo-600 p-2.5 rounded-lg shadow-md">
                      <Calendar size={20} className="text-white" />
                    </div>
                    <div>
                      <h3 className="font-bold text-xl">Upload Timetable</h3>
                      <p className="text-gray-400 text-sm">Paste your VIT timetable to identify free slots for scheduling reviews</p>
                    </div>
                  </div>
                  
                  <div className="bg-gray-900/70 rounded-lg p-5 backdrop-blur-sm border border-gray-800">
                    <textarea
                      className="w-full h-28 bg-gray-800/80 border border-gray-700 rounded-lg p-4 text-white resize-none focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-transparent"
                      placeholder="Paste your timetable data here from VIT timetable portal..."
                      value={timetableText}
                      onChange={(e) => setTimetableText(e.target.value)}
                    ></textarea>
                    
                    {parseError && (
                      <div className="mt-4 p-3 bg-red-900/40 border border-red-800 rounded-lg flex items-start gap-2 text-sm">
                        <AlertCircle className="text-red-400 h-5 w-5 mt-0.5 flex-shrink-0" />
                        <p className="text-red-300">{parseError}</p>
                      </div>
                    )}
                    
                    <div className="mt-5 flex items-center justify-between">
                      {parseSuccess ? (
                        <div className="flex items-center gap-2 bg-green-900/40 text-green-300 px-4 py-2 rounded-lg text-sm border border-green-800/50">
                          <CheckCircle size={16} />
                          <span>{allFreeSlots.length} free slots identified</span>
                        </div>
                      ) : (
                        <div className="text-sm text-gray-500 italic">
                          Paste your timetable and click Parse to identify free slots
                        </div>
                      )}
                      
                      <motion.button
                        whileHover={{ scale: 1.03 }}
                        whileTap={{ scale: 0.97 }}
                        className="bg-indigo-600 text-white px-5 py-2.5 rounded-lg font-medium hover:bg-indigo-700 transition-colors flex items-center gap-2 shadow-md"
                        onClick={() => {
                          try {
                            setParseError(null);
                            setParseSuccess(false);

                            if (!timetableText.trim()) {
                              setParseError("Please paste your timetable data first");
                              return;
                            }

                            const schedule = parseTimetableSlots(timetableText);
                            setParsedSchedule(schedule);

                            const slots = getAllFreeSlots(schedule);
                            setAllFreeSlots(slots);

                            // Also update split slots based on current duration
                            const duration = parseInt(reviewDuration, 10);
                            const splitSlots = splitAllSlotsByDuration(slots, duration);
                            setSplitFreeSlots(splitSlots);

                            setParseSuccess(true);
                          } catch (error) {
                            console.error("Error parsing timetable:", error);
                            setParseError(error instanceof Error ? error.message : "Failed to parse timetable");
                          }
                        }}
                      >
                        <Grid size={18} />
                        Parse Timetable
                      </motion.button>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Available Slots */}
              {allFreeSlots.length > 0 && (
                <motion.div 
                  variants={itemVariants}
                  className="grid grid-cols-1 md:grid-cols-2 gap-4"
                >
                  {/* Available Slots List */}
                  <div className="bg-gray-900 border border-gray-800 rounded-xl overflow-hidden">
                    <div className="border-b border-gray-800 p-3 flex justify-between items-center">
                      <h3 className="text-xl font-bold">Available Slots</h3>
                      <div className="flex items-center gap-2">
                        <label className="text-xs text-gray-400">Duration:</label>
                        <select 
                          className="bg-gray-800 border border-gray-700 rounded-lg px-2 py-1 text-xs text-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-transparent"
                          value={reviewDuration}
                          onChange={(e) => {
                            setReviewDuration(e.target.value);
                            // Update split slots based on new duration
                            const duration = parseInt(e.target.value, 10);
                            const splitSlots = splitAllSlotsByDuration(allFreeSlots, duration);
                            setSplitFreeSlots(splitSlots);
                            setSelectedSlots([]);
                          }}
                        >
                          <option value="10">10 min</option>
                          <option value="15">15 min</option>
                          <option value="20">20 min</option>
                          <option value="30">30 min</option>
                        </select>
                      </div>
                    </div>
                    <div className="p-3">
                      <div className="space-y-1 max-h-[300px] overflow-y-auto pr-1">
                        {splitFreeSlots.length === 0 ? (
                          <div className="text-center py-4 text-gray-400">
                            <Clock size={24} className="mx-auto mb-2 text-gray-600" />
                            <p className="text-sm">No available slots with current duration</p>
                          </div>
                        ) : (
                          splitFreeSlots.map((slot, index) => {
                            const isSelected = selectedSlots.some(s => 
                              s.day === slot.day && 
                              s.start === slot.start && 
                              s.end === slot.end
                            );
                            
                            return (
                              <div 
                                key={`${slot.day}-${slot.start}-${index}`}
                                className={`flex items-center justify-between p-2 rounded-lg cursor-pointer transition-colors text-sm ${
                                  isSelected 
                                    ? 'bg-indigo-900/40 border border-indigo-700'
                                    : 'bg-gray-800 hover:bg-gray-700'
                                }`}
                                onClick={() => {
                                  if (isSelected) {
                                    // Remove from selected
                                    setSelectedSlots(selectedSlots.filter(s => 
                                      !(s.day === slot.day && s.start === slot.start && s.end === slot.end)
                                    ));
                                  } else {
                                    // Add to selected
                                    setSelectedSlots([...selectedSlots, slot]);
                                  }
                                }}
                              >
                                <div className="flex items-center gap-2">
                                  <div className={`w-2 h-2 rounded-full ${isSelected ? 'bg-indigo-500' : 'bg-green-500'}`}></div>
                                  <span>{getDayFullName(slot.day)}, {slot.start} - {slot.end}</span>
                                </div>
                                <button 
                                  className={`text-xs px-2 py-0.5 rounded-full ${
                                    isSelected
                                      ? 'bg-indigo-700 text-white hover:bg-indigo-600'
                                      : 'bg-indigo-900/30 text-indigo-400 hover:bg-indigo-800/40'
                                  }`}
                                >
                                  {isSelected ? 'Selected' : 'Add'}
                                </button>
                              </div>
                            );
                          })
                        )}
                      </div>
                      
                      {splitFreeSlots.length > 0 && (
                        <div className="mt-3 flex justify-between items-center text-xs">
                          <span className="text-gray-400">
                            {splitFreeSlots.length} available slots
                          </span>
                          <button 
                            className="text-indigo-400 hover:text-indigo-300"
                            onClick={() => {
                              if (selectedSlots.length === splitFreeSlots.length) {
                                // Deselect all
                                setSelectedSlots([]);
                              } else {
                                // Select all
                                setSelectedSlots([...splitFreeSlots]);
                              }
                            }}
                          >
                            {selectedSlots.length === splitFreeSlots.length ? 'Deselect All' : 'Select All'}
                          </button>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Publish Slots Form */}
                  <div className="bg-gray-900 border border-gray-800 rounded-xl overflow-hidden">
                    <div className="border-b border-gray-800 p-3">
                      <h3 className="font-bold text-sm flex items-center gap-2">
                        <Calendar size={14} className="text-indigo-400" />
                        Publish Review Slots
                      </h3>
                    </div>
                    
                    <div className="p-3">
                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs text-gray-400 mb-1">
                            Review Stage
                          </label>
                          <select 
                            className="w-full bg-gray-800 border border-gray-700 rounded-lg px-3 py-1.5 text-sm text-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-transparent"
                            value={reviewStage}
                            onChange={(e) => setReviewStage(e.target.value)}
                          >
                            <option value="Review 1">Review 1</option>
                            <option value="Review 2">Review 2</option>
                            <option value="Review 3">Review 3</option>
                          </select>
                        </div>
                        
                        <div>
                          <label className="block text-xs text-gray-400 mb-1">
                            Booking Deadline
                          </label>
                          <input
                            type="date"
                            className="w-full bg-gray-800 border border-gray-700 rounded-lg px-3 py-1.5 text-sm text-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-transparent"
                            value={bookingDeadline}
                            onChange={(e) => setBookingDeadline(e.target.value)}
                            min={new Date().toISOString().split('T')[0]}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-xs text-gray-400 mb-1">
                            Assign to Classroom
                          </label>
                          <select 
                            className="w-full bg-gray-800 border border-gray-700 rounded-lg px-3 py-1.5 text-sm text-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-transparent"
                            value={selectedClassroomId}
                            onChange={(e) => setSelectedClassroomId(e.target.value)}
                          >
                            <option value="">Select a classroom</option>
                            {classrooms.map((classroom) => (
                              <option key={classroom.id} value={classroom.id}>
                                {classroom.name}
                              </option>
                            ))}
                          </select>
                        </div>
                        
                        {selectedSlots.length > 0 && (
                          <div>
                            <div className="flex justify-between items-center mb-1">
                              <p className="text-xs text-gray-400">Selected slots</p>
                              <span className="text-xs bg-indigo-900/30 text-indigo-400 px-2 py-0.5 rounded-full">
                                {selectedSlots.length} slots
                              </span>
                            </div>
                            <div className="max-h-20 overflow-y-auto bg-gray-800 rounded-lg p-2 text-xs space-y-1">
                              {selectedSlots.map((slot, index) => (
                                <div key={index} className="flex justify-between items-center p-1 hover:bg-gray-700 rounded">
                                  <span className="text-xs">{getDayFullName(slot.day)}, {slot.start} - {slot.end}</span>
                                  <button 
                                    className="text-red-400 hover:text-red-300 text-xs"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      setSelectedSlots(selectedSlots.filter((_, i) => i !== index));
                                    }}
                                  >
                                    ✕
                                  </button>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        <div className="pt-2">
                          <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            className={`w-full py-2 px-4 rounded-lg text-sm flex items-center justify-center gap-2 ${
                              selectedSlots.length > 0 && selectedClassroomId && bookingDeadline
                                ? 'bg-indigo-600 text-white hover:bg-indigo-700'
                                : 'bg-gray-700 text-gray-300 cursor-not-allowed'
                            }`}
                            disabled={selectedSlots.length === 0 || !selectedClassroomId || !bookingDeadline}
                            onClick={async () => {
                              if (selectedSlots.length === 0 || !selectedClassroomId || !bookingDeadline) return;
                              
                              try {
                                // Call the API to publish slots
                                const response = await fetch('/api/slots/publish', {
                                  method: 'POST',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    classroomId: selectedClassroomId,
                                    slots: selectedSlots,
                                    duration: parseInt(reviewDuration, 10),
                                    reviewStage: reviewStage,
                                    bookingDeadline: bookingDeadline
                                  }),
                                });
                                
                                if (!response.ok) {
                                  const errorData = await response.json();
                                  throw new Error(errorData.message || 'Failed to publish slots');
                                }
                                
                                const result = await response.json();
                                
                                // Show success message
                                setPublishSuccess(true);
                                setPublishMessage(result.message || 'Slots published successfully!');
                                
                                // Clear selected slots after a delay
                                setTimeout(() => {
                                  setSelectedSlots([]);
                                  setPublishSuccess(false);
                                }, 3000);
                              } catch (error) {
                                console.error('Error publishing slots:', error);
                                setPublishError(true);
                                setPublishMessage(error instanceof Error ? error.message : 'Failed to publish slots');
                                
                                // Clear error after a delay
                                setTimeout(() => {
                                  setPublishError(false);
                                }, 5000);
                              }
                            }}
                          >
                            <Calendar size={16} />
                            Publish {selectedSlots.length} Slots
                          </motion.button>
                          
                          {publishSuccess && (
                            <div className="mt-3 p-2 bg-green-900/30 border border-green-800 rounded-lg flex items-center gap-2 text-xs">
                              <CheckCircle className="text-green-400 h-4 w-4 flex-shrink-0" />
                              <p className="text-green-300">{publishMessage}</p>
                            </div>
                          )}
                          
                          {publishError && (
                            <div className="mt-3 p-2 bg-red-900/30 border border-red-800 rounded-lg flex items-center gap-2 text-xs">
                              <AlertCircle className="text-red-400 h-4 w-4 flex-shrink-0" />
                              <p className="text-red-300">{publishMessage}</p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </motion.div>
          )}

          {activeTab === 'slots' && (
            <motion.div
              initial="hidden"
              animate="visible"
              variants={containerVariants}
            >
              <motion.div variants={itemVariants} className="mb-6">
                <h2 className="text-2xl font-bold mb-2">Review Slots</h2>
                <p className="text-gray-400">Manage and monitor your published review slots</p>
              </motion.div>

              {/* Published Slots */}
              <motion.div variants={itemVariants} className="bg-gray-900 border border-gray-800 rounded-xl p-6 mb-8">
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-xl font-bold">Published Slots</h3>
                  <div className="flex gap-2">
                    <select className="bg-gray-800 border border-gray-700 rounded-lg px-3 py-1 text-sm text-white">
                      <option value="all">All Classrooms</option>
                      {classrooms.map((classroom) => (
                        <option key={classroom.id} value={classroom.id}>
                          {classroom.name}
                        </option>
                      ))}
                    </select>
                    <select className="bg-gray-800 border border-gray-700 rounded-lg px-3 py-1 text-sm text-white">
                      <option value="all">All Reviews</option>
                      <option value="Review 1">Review 1</option>
                      <option value="Review 2">Review 2</option>
                      <option value="Review 3">Review 3</option>
                    </select>
                  </div>
                </div>

                <motion.div variants={itemVariants} className="bg-gray-900 border border-gray-800 rounded-xl p-6 overflow-hidden">
                  {slotsLoading ? (
                    <div className="flex justify-center items-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
                    </div>
                  ) : reviewSlots.length === 0 ? (
                    <div className="text-center py-8">
                      <div className="mb-4 mx-auto w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center">
                        <Calendar size={24} className="text-gray-400" />
                      </div>
                      <h4 className="text-lg font-medium mb-2">No review slots found</h4>
                      <p className="text-gray-400 mb-6">Create review slots by parsing your timetable</p>
                      <button 
                        className="bg-indigo-600 text-white px-4 py-2 rounded-lg inline-flex items-center gap-2 font-medium"
                        onClick={() => setActiveTab('timetable')}
                      >
                        <Clock size={18} />
                        Parse Timetable
                      </button>
                    </div>
                  ) : (
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-800">
                        <thead>
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Time Slot</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Duration</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Classroom</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Review Stage</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Bookings</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-800">
                          {reviewSlots.map((slot) => (
                            <tr key={slot.id} className="bg-gray-900 hover:bg-gray-800">
                              <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-white">
                                {getDayFullName(slot.day)}, {slot.time}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-400">
                                {slot.duration} mins
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-400">
                                {slot.classroom}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-400">
                                {slot.review_stage}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-400">
                                {slot.bookings_count}/{slot.is_available ? 'Open' : 'Closed'}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm">
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  slot.status === 'Available' ? 'bg-emerald-900/30 text-emerald-400' :
                                  slot.status === 'Booked' ? 'bg-amber-900/30 text-amber-400' :
                                  'bg-red-900/30 text-red-400'
                                }`}>
                                  {slot.status}
                                </span>
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-400">
                                <button className="text-indigo-400 hover:text-indigo-300 mr-2">
                                  Edit
                                </button>
                                <button className="text-red-400 hover:text-red-300">
                                  Cancel
                                </button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </motion.div>

              {/* Calendar View */}
              <motion.div variants={itemVariants} className="bg-gray-900 border border-gray-800 rounded-xl p-6">
                <h3 className="text-xl font-bold mb-4">Calendar View</h3>
                <p className="text-gray-400 text-sm mb-6">
                  Green slots are available, yellow are partially booked, and red are fully booked
                </p>

                <div className="grid grid-cols-5 gap-4 mb-4">
                  {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].map((day, index) => (
                    <div key={index} className="text-center font-medium">
                      {day}
                    </div>
                  ))}
                </div>

                <div className="grid grid-cols-5 gap-4">
                  {['MON', 'TUE', 'WED', 'THU', 'FRI'].map((day, dayIndex) => (
                    <div key={dayIndex} className="space-y-2">
                      {Array.from({ length: 8 }).map((_, timeIndex) => {
                        const hour = 9 + timeIndex;
                        const status = Math.random() > 0.7 ? 'booked' : Math.random() > 0.5 ? 'partial' : 'available';

                        return (
                          <div
                            key={`${day}-${timeIndex}`}
                            className={`p-2 rounded-md text-xs ${
                              status === 'available'
                                ? 'bg-green-900/20 border border-green-800/30 text-green-400'
                                : status === 'partial'
                                ? 'bg-yellow-900/20 border border-yellow-800/30 text-yellow-400'
                                : 'bg-red-900/20 border border-red-800/30 text-red-400'
                            }`}
                          >
                            {hour}:00 - {hour}:30
                          </div>
                        );
                      })}
                    </div>
                  ))}
                </div>
              </motion.div>
            </motion.div>
          )}

          {activeTab === 'submissions' && (
            <motion.div
              initial="hidden"
              animate="visible"
              variants={containerVariants}
            >
              <motion.div variants={itemVariants} className="mb-6">
                <h2 className="text-2xl font-bold mb-2">Submissions</h2>
                <p className="text-gray-400">Review and manage student submissions</p>
              </motion.div>

              {/* Submissions List */}
              <motion.div variants={itemVariants} className="bg-gray-900 border border-gray-800 rounded-xl p-6">
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-xl font-bold">Recent Submissions</h3>
                  <div className="flex gap-2">
                    <select className="bg-gray-800 border border-gray-700 rounded-lg px-3 py-1 text-sm text-white">
                      <option value="all">All Classrooms</option>
                      {classrooms.map((classroom) => (
                        <option key={classroom.id} value={classroom.id}>
                          {classroom.name}
                        </option>
                      ))}
                    </select>
                    <select className="bg-gray-800 border border-gray-700 rounded-lg px-3 py-1 text-sm text-white">
                      <option value="all">All Statuses</option>
                      <option value="pending">Pending</option>
                      <option value="reviewed">Reviewed</option>
                      <option value="graded">Graded</option>
                    </select>
                  </div>
                </div>

                {submissionsLoading ? (
                  <div className="flex justify-center items-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
                  </div>
                ) : submissions.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="mb-4 mx-auto w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center">
                      <FileText size={24} className="text-gray-400" />
                    </div>
                    <h4 className="text-lg font-medium mb-2">No submissions yet</h4>
                    <p className="text-gray-400">Student submissions will appear here</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {submissions.map((submission) => (
                      <div key={submission.id} className="bg-gray-800 rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h4 className="font-medium">{submission.title}</h4>
                            <p className="text-gray-400 text-sm">Team {submission.team_name} - {submission.project_title}</p>
                          </div>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            submission.status === 'Pending' ? 'bg-amber-900/30 text-amber-400' :
                            submission.status === 'Reviewed' ? 'bg-emerald-900/30 text-emerald-400' :
                            submission.status === 'Graded' ? 'bg-indigo-900/30 text-indigo-400' :
                            'bg-gray-700 text-gray-300'
                          }`}>
                            {submission.status}
                          </span>
                        </div>
                        <p className="text-sm text-gray-300 mb-3 line-clamp-2">
                          {submission.description || 'No description provided'}
                        </p>
                        <div className="flex justify-between items-center text-xs text-gray-400">
                          <span>Submitted on {submission.formatted_date}</span>
                          <div className="flex gap-2">
                            {submission.file_url && (
                              <a 
                                href={submission.file_url} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-indigo-400 hover:text-indigo-300"
                              >
                                View File
                              </a>
                            )}
                            <button className="text-green-400 hover:text-green-300">
                              {submission.status === 'Pending' ? 'Mark as Reviewed' : 'Update Status'}
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </motion.div>
            </motion.div>
          )}
        </motion.div>
      </main>

      {/* Classroom Details Modal */}
      <AnimatePresence>
        {showClassroomDetailsModal && (
          <ClassroomDetailsModal 
            classroom={selectedClassroom}
            onClose={() => setShowClassroomDetailsModal(false)}
          />
        )}
      </AnimatePresence>
    </div>
  );
}

// Helper function to get full day name
function getDayFullName(day: string): string {
  const dayMap: Record<string, string> = {
    'MON': 'Monday',
    'TUE': 'Tuesday',
    'WED': 'Wednesday',
    'THU': 'Thursday',
    'FRI': 'Friday'
  };
  return dayMap[day] || day;
}
